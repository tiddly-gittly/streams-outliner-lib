title: $:/plugins/sq/streams/action-macros

\whitespace trim

\define swiped-right-actions()
<$list filter="[{$:/config/sq/streams/swipe-behaviour}match[contextmenu]]" variable="_NULL">
<$action-setfield $tiddler=<<contextmenu-state>> $field="current" $value=<<dom-data-node-title>>/>
<$action-setfield $tiddler=<<contextmenu-state>> $field="position" $value={{$:/config/sq/streams/swipe-contextmenu-position}}/>
<$action-popup $coords=<<tv-popup-coords>> $state=<<contextmenu-state>>/>
</$list>
<$list filter="[{$:/config/sq/streams/swipe-behaviour}match[indent]]" variable="_NULL">
<$vars currentTiddler=<<dom-data-node-title>>>
<<indent-node-actions>>
</$vars>
</$list>
\end

\define swiped-left-actions()
<$list filter="[{$:/config/sq/streams/swipe-behaviour}match[indent]]" variable="_NULL">
<$vars currentTiddler=<<dom-data-node-title>>>
<<unindent-node-actions>>
</$vars>
</$list>
\end


\define oncontext-menu-actions()
<$action-setfield $tiddler=<<contextmenu-state>> $field="current" $value=<<dom-data-node-title>>/>
<$action-setfield $tiddler=<<contextmenu-state>> $field="position" $value="left"/>
<$action-popup $coords=<<tv-popup-coords>> $state=<<contextmenu-state>>/>
\end


\define node-ctrl-btn-actions()
<$list filter="[<dom-data-btn-role>match[stream-node-visibility]]" variable="NULL">
<$action-setfield $tiddler=<<dom-data-rowchildren-visibility-state>> text={{{ [<dom-data-rowchildren-visibility-state>get[text]match[hide]then[show]else[hide]] }}} />
</$list>
<$list filter="[<dom-data-btn-role>match[stream-node-decorator]]" variable="NULL">
<$action-navigate $to=<<dom-data-node-title>>/>
</$list>
\end


\define toggle-row-edit-state()
<$action-unselect/>
<$list filter="[<row-edit-state>get[text]else[]!match<dom-data-node-title>]" variable="NULL">
<$list filter="[[$:/status/IsReadOnly]get[text]!is[blank]else[no]!match[yes]]" variable="NULL">
	<$action-setfield $tiddler=<<row-edit-state>> text=<<dom-data-node-title>> />
<!--	<$action-setfield $tiddler=<<dom-data-node-title>> throttle.refresh="yes"/>-->
</$list>
</$list>
\end


\define save-edit-node-actions()
<!-- handle saving a node being edited -->
<!-- XXX draft -->
<!--<$action-deletefield $tiddler={{{ [<dom-data-node-title>!is[blank]else<currentTiddler>] }}} $field="throttle.refresh" />-->
<$action-deletetiddler $tiddler=<<row-edit-state>> />
\end


\define indent-node-actions()
<!-- handle indenting a node -->
<$vars previous-node={{{ [{!!parent}get[stream-list]enlist-input[]is[tiddler]before<currentTiddler>] }}}>
<$list filter="[<previous-node>minlength[1]]" variable="_NULL">
	<$action-listops $tiddler=<<previous-node>> $field="stream-list" $subfilter="+[is[tiddler]] [<currentTiddler>]"/>
	<$action-listops $tiddler={{!!parent}} $field="stream-list" $subfilter="+[is[tiddler]] -[<currentTiddler>]"/>
	<$action-setfield $tiddler=<<currentTiddler>> parent=<<previous-node>> />
</$list>
</$vars>
\end


\define unindent-node-actions()
<!-- handle unindenting a node -->
<$vars new-parent={{{ [{!!parent}get[parent]] }}} new-next-node={{{ [{!!parent}get[parent]get[stream-list]enlist-input[]is[tiddler]after{!!parent}] }}}>
    <$list filter="[<new-parent>minlength[1]]" variable="_NULL">
        <$action-listops $tiddler=<<new-parent>> $field="stream-list" $subfilter="+[is[tiddler]] +[insertbefore:new-next-node<currentTiddler>]"/>
        <$action-listops $tiddler={{!!parent}} $field="stream-list" $subfilter="+[is[tiddler]] -[<currentTiddler>]"/>
        <$action-setfield $tiddler=<<currentTiddler>> parent=<<new-parent>> />
    </$list>
</$vars>
\end


\define demote-node-actions()
<!-- move a node below the next node -->
<$list filter="[{!!parent}get[stream-list]enlist-input[]after<currentTiddler>]" variable="next-node">
    <$action-listops $tiddler={{!!parent}} $field="stream-list" $subfilter="+[insertbefore:currentTiddler<next-node>]"/>
</$list>
\end


\define promote-node-actions()
<!-- move a node above the previous node -->
<$list filter="[{!!parent}get[stream-list]enlist-input[]before<currentTiddler>]" variable="previous-node">
    <$action-listops $tiddler={{!!parent}} $field="stream-list" $subfilter="+[insertbefore:previous-node<currentTiddler>]"/>
</$list>
\end


\define save-node-actions()
<$list filter="""[{$:/config/sq/streams/split-at-caret}match[yes]]""" variable="_NULL" emptyMessage=<<add-node-actions>> >
<$list filter="[<selectionEnd>!is[blank]else[0]!match[0]]" variable="_NULL">
<$list filter="[<currentTiddler>get[text]length[]subtract<selectionEnd>!match[0]]" variable="_NULL" emptyMessage=<<add-node-actions>>>
	<$macrocall $name="add-node-actions" startText={{{[<currentTiddler>get[text]split[]rest<selectionEnd>join[]trim[]]}}} streamList={{!!stream-list}} /><!--insertPosition="title"-->
	<$action-setfield $tiddler="$:/state/sq/streams/caret-position" text="0"/>
	<$action-setfield $tiddler=<<currentTiddler>> text={{{[<currentTiddler>get[text]split[]first<selectionEnd>join[]]}}} stream-list=""/>
</$list>
</$list>
<$list filter="[<selectionEnd>!is[blank]else[0]match[0]]" variable="_NULL">
	<$list filter="[<currentTiddler>!has[text]]" variable="_NULL" emptyMessage=<<add-node-actions "" "title">> >
		<$list filter="""[{$:/config/sq/streams/exit-on-saving-empty-node}match[yes]]""" variable="_NULL" emptyMessage=<<add-node-actions>> >
			<<cancel-edit-node-actions>>
		</$list>
	</$list>
</$list>
</$list>
\end

\define add-new-node-actions()
<!-- used by new node button at the bottom of a stream -->
<$list filter="[[$:/status/IsReadOnly]get[text]!is[blank]else[no]!match[yes]]" variable="NULL">
<<add-node-actions>>
</$list>
\end


\define add-node-actions(startText:"",insertPosition:"after",streamList:"")
<!-- handle saving a node edit and creating a new subsequent node -->
<$set name="parent" filter="[<currentTiddler>match<stream-root-title>] ~[{!!parent}] +[first[]]" select="0">
<$wikify name="new-node" text={{$:/config/sq/streams/new-node-title}}>
<$wikify name="new-node" text={{{[[<<unusedtitle """]addsuffix<new-node>addsuffix[""">>]]}}}>
	<$action-createtiddler $basetitle=<<new-node>> text=<<__startText__>> $template={{$:/config/sq/streams/new-node-tiddler-template}} parent=<<parent>> stream-type="default" stream-list=<<__streamList__>>/>
	<$set name="parent-nodes" filter="[<parent>get[stream-list]]" select="0">
	<$set name="next-node" filter="[enlist<parent-nodes>is[tiddler]$insertPosition$<currentTiddler>]" select="0">
	<$action-listops $tiddler=<<parent>> $field="stream-list" $subfilter="+[is[tiddler]] +[insertbefore:next-node<new-node>]"/>
	<$list filter="[<parent>!has[stream-type]]" variable="_NULL">
		<$action-setfield $tiddler=<<parent>> stream-type="default"/>
	</$list>
	<$list filter="[enlist<__streamList__>]">
		<$action-setfield $tiddler=<<currentTiddler>> parent=<<new-node>>/>
	</$list>
	</$set>
	</$set>
	<$action-setfield $tiddler=<<row-edit-state>> text=<<new-node>>/>
</$wikify>
</$wikify>
</$set>
\end


\define save-multiple-actions()
<!-- handle multiple nodes entered at once -->
<$action-confirm $message="Split into multiple nodes?" $prompt={{$:/config/sq/streams/prompt-split-to-multiple}}>
<$list filter="[{!!text}splitregexp{$:/config/sq/streams/node-split-regexp}rest[]reverse[]]" variable="fragment">
	<$action-confirm $message="Split into multiple nodes?" $prompt="no">
		<$macrocall $name="add-node-actions" startText=<<fragment>> />
	</$action-confirm>
</$list>
<$action-setfield $tiddler=<<currentTiddler>> text={{{[{!!text}splitregexp{$:/config/sq/streams/node-split-regexp}first[]]}}}/>
<<add-node-actions>>
</$action-confirm>
\end


\define cancel-edit-node-actions()
<!-- handle cancelling the edit on an empty node -->
<$list filter="[<currentTiddler>!has[stream-list]!has[text]]" variable="_NULL">
	<$action-listops $tiddler={{{[{!!parent}]}}} $field="stream-list" $subfilter="+[is[tiddler]] -[<currentTiddler>]"/>
	<$action-deletetiddler $tiddler=<<currentTiddler>> />
</$list>
<!--<$action-deletefield $tiddler=<<currentTiddler>> $field="throttle.refresh" />-->
<$action-deletetiddler $tiddler=<<row-edit-state>> />
\end


\define merge-with-previous-node-actions()
<!-- handle backspace on an empty node -->
<$list filter="""[<currentTiddler>!has[text]]""" variable="_NULL">
	<<cancel-edit-node-actions>>
	<<focus-higher-node-actions>>
</$list>

<$list filter="""[<currentTiddler>has[text]]""" variable="_NULL">
<$list filter="[<selectionEnd>match[0]]" variable="_NULL">

<!--<$action-log/>-->
	<$set name="parent" value={{!!parent}} select="0">
	<$set name="stream-list" filter="[<parent>get[stream-list]]" select="0">
	<$list filter="[enlist<stream-list>before<currentTiddler>]" variable="previous-node">
		<$list filter="[<previous-node>!has[stream-list]]" variable="_NULL">
		<$action-confirm $message="Merge with previous node?" $prompt={{$:/config/sq/streams/prompt-merge-with-previous}}>
			<$action-setfield $tiddler="$:/state/sq/streams/caret-position" text={{{[<previous-node>get[text]length[]]}}}/>
			<$action-setfield $tiddler=<<previous-node>> text={{{[<previous-node>get[text]!is[blank]else[]addsuffix{!!text}]}}} stream-list={{!!stream-list}}/>
			<$action-setfield $tiddler=<<row-edit-state>> text=<<previous-node>>/>
			<$action-listops $tiddler={{!!parent}} $field="stream-list" $subfilter="+[is[tiddler]] -[<currentTiddler>]"/>			
			<$action-deletetiddler $tiddler=<<currentTiddler>>/>
		</$action-confirm>	
		</$list>
	</$list>
	</$set>
	</$set>
	
</$list>
</$list>

\end


\define delete-node-actions()
<$action-confirm  $message="Do you wish to delete this tiddler?">
	<$transclude tiddler="$:/plugins/sq/streams/delete-hook/actions"/>
	<$action-deletetiddler $tiddler=<<currentTiddler>> />
	<$list filter="[<row-edit-state>get[text]match<currentTiddler>]">
		<<focus-higher-node-actions>>
	</$list>
</$action-confirm>
\end


\define rename-node-actions()
<$action-withinput message="Rename this tiddler?" default=<<currentTiddler>> actions="""
	<$action-sendmessage $message="tm-rename-tiddler" from=<<currentTiddler>> to=<<userInput>>/>
	<$list filter="[<row-edit-state>match<currentTiddler>]" variable="_NULL">
		<$action-setfield $tiddler=<<row-edit-state>> text=<<userInput>>/>
	</$list>
"""/>
\end


\define find-last-child()
<!-- used by focus-higher-node-actions macro -->
<$list filter="[enlist{!!stream-list}is[tiddler]last[]]" emptyMessage="""<$action-setfield $tiddler=<<row-edit-state>> text=<<currentTiddler>>/>""">
	<$macrocall $name="find-last-child"/>
</$list>
\end


\define focus-higher-node-actions()
<!-- handles moving up in the nodes with the keyboard -->
<$vars old-parent={{!!parent}} >
<$list filter="[{!!parent}get[stream-list]enlist-input[]is[tiddler]before<currentTiddler>]" emptyMessage="""<$list filter="[<old-parent>!match<stream-root-title>]"><$action-setfield $tiddler=<<row-edit-state>> text=<<old-parent>> /></$list>""">
	<$macrocall $name="find-last-child"/>
</$list>
</$vars>
\end


\define find-next-downwards-node()
<!-- used by focus-lower-node-actions macro -->
<$list filter="[<currentTiddler>has[parent]]" variable="_NULL">
<$set name="old-parent" value={{!!parent}} select="0">
<$set name="old-parent-nodes" filter="[<old-parent>get[stream-list]]" select="0">
<$list filter="[enlist<old-parent-nodes>is[tiddler]after<currentTiddler>]" emptyMessage="""<$set name="currentTiddler" value=<<old-parent>>><<find-next-downwards-node>></$set>""">
	<$action-setfield $tiddler=<<row-edit-state>> text=<<currentTiddler>>/>	
</$list>
</$set>
</$set>
</$list>
\end


\define focus-lower-node-actions()
<!-- handles moving down in the nodes with the keyboard -->
<!--if children, get the first child-->
<$list filter="[<currentTiddler>get[stream-list]enlist-input[]is[tiddler]first[]]" variable="next-node">
    <$action-setfield $tiddler=<<row-edit-state>> text=<<next-node>> />
</$list>
<!-- if no children-->
<!--- get closest ancestor with next sibling -->
<$list filter="[<currentTiddler>!has[stream-list]]" variable="_NULL">
	<$set name="old-active-node" value=<<currentTiddler>> >
		<<find-next-downwards-node>>
	</$set>
</$list>
\end


\define node-drag-start-actions()
<!-- parameter to draggable widget -->
<$action-setfield $tiddler=<<drag-title-state>> text=<<currentTiddler>>/>
<$action-setfield $tiddler="$:/state/sq/nodes/global-drag-state" text="yes"/>
<$set name="siblings" filter="[{!!parent}get[stream-list]]" select="0">
<$list filter="[enlist<siblings>after<currentTiddler>]" variable="next-node">
	<$action-setfield $tiddler=<<drag-title-nextsibling-state>> text=<<next-node>> />
</$set>
\end


\define node-drag-end-actions()
<!-- parameter to draggable widget -->
<$action-deletetiddler $filter="""[<drag-title-state>][<drag-title-nextsibling-state>][[$:/state/sq/nodes/global-drag-state]]""" />
\end


\define stream-drop-actions()
<!-- handles drag and drop -->
<$vars startBrackets="[[" endBrackets="]]" parent=<<dropTargetTiddler>> >
<$vars actionTiddler={{{[<actionTiddler>trim:suffix<endBrackets>trim:prefix<startBrackets>]}}}>
<!-- if target has no stream-type, assign one -->
<$list filter="[<dropTargetTiddler>!has[stream-type]]">
	<$action-setfield $tiddler=<<dropTargetTiddler>> stream-type="default"/>
</$list>
<!-- if action tiddler has no stream-type, assign one -->
<$list filter="[<actionTiddler>!has[stream-type]]" variable="_NULL">
	<$action-setfield $tiddler=<<actionTiddler>> stream-type="default" />
</$list>
<!-- if we are dropping onto a new parent, then we might need to handle modifier keys -->
<$list filter="[<actionTiddler>get[parent]!match<parent>] [<actionTiddler>!has[parent]]" variable="_NULL">
	<$wikify name="new-node" text={{$:/config/sq/streams/new-node-title}}>
		<!-- ctrl modifier key on drop event -->
		<!-- create a new node with text of dropped node -->
		<$list filter="[<modifier>match{$:/config/sq/streams/dnd-modifier-copy-node}]" variable="_NULL">
			<$action-createtiddler $basetitle=<<new-node>> text={{{ [<actionTiddler>get[text]] }}} parent=<<parent>> stream-type="default"/>
			<!-- insert into correct position on new parent -->
			<$action-listops $tiddler=<<dropTargetTiddler>> $field="stream-list" $subfilter="+[insertbefore:currentTiddler<new-node>]"/>
		</$list>
		<!-- shift modifier key on drop event -->
		<$list filter="[<modifier>match{$:/config/sq/streams/dnd-modifier-transclude-node}]" variable="_NULL">
			<!-- create new node on target, in correct position, text is a transclusion-->
			<$action-createtiddler $basetitle=<<new-node>> text={{{ [<actionTiddler>addprefix[{{]addsuffix[}}]] }}} parent=<<parent>> stream-type="default"/>
			<!-- insert into correct position on new parent -->
			<$action-listops $tiddler=<<dropTargetTiddler>> $field="stream-list" $subfilter="+[insertbefore:currentTiddler<new-node>]"/>
		</$list>
	</$wikify>
	<!-- no modifier key on drop event -->
	<!-- insert in correct position on new parent, and remove from old parent -->
	<!-- assign new parent -->
	<$list filter="[<modifier>match[normal]]" variable="_NULL">
		<$action-listops $tiddler=<<dropTargetTiddler>> $field="stream-list" $subfilter="+[insertbefore:currentTiddler<actionTiddler>]"/>
		<$set name="original-parent" filter="[<actionTiddler>get[parent]]" select="0">
			<$action-listops $tiddler=<<original-parent>> $field="stream-list" $subfilter="-[title<actionTiddler>]"/>
		</$set>
		<$action-setfield $tiddler=<<actionTiddler>> parent=<<parent>>/>
	</$list>
</$list>
<!-- we are dropping on to the same parent, insert in the correct position -->
<$list filter="[<actionTiddler>get[parent]match<parent>]" variable="_NULL">
	<$action-listops $tiddler=<<dropTargetTiddler>> $field="stream-list" $subfilter="+[insertbefore:currentTiddler<actionTiddler>]"/>
</$list>
</$vars>
</$vars>
\end